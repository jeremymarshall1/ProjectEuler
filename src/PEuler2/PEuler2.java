package PEuler2;

/**
 * Even Fibonacci numbers
 * Problem 2
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2,
 * the first 10 terms will be:
 *
 *  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 *
 * By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of
 * the even-valued terms.
 *
 * Created by jeremy on 12/5/15.
 */
public class PEuler2 {

    public static void main(String[] args) {
        int latestFibNum = 0;
        int totalSum = 0;
        int maxNumber = 4000000;
        if (args.length > 0) {
            maxNumber = Integer.parseInt(args[0]);
        }

        for (int x = 0; latestFibNum < maxNumber; x++){
            latestFibNum = fib(x);
            if (latestFibNum % 2 == 0){
                totalSum += latestFibNum;
            }
        }

        System.out.println(totalSum);
    }

    private static int fib(int n) {
        // Calculate the nth fibonacci value using the rounding method found here,
        // http://will.thimbleby.net/algorithms/doku.php?id=fibonacci
        return (int)Math.round(Math.pow(phi, n)/square5);
    }

    private static double square5 = Math.sqrt(5);
    private static double phi = (square5+1)/2;

}
